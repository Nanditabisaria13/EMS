Example Schema (in Mongoose for MongoDB):
javascript
Copy code
const mongoose = require('mongoose');

const taskSchema = new mongoose.Schema({
  id: { type: Number, required: true },  // This can be the array index or a unique ID
  title: { type: String, required: true },
  description: { type: String, required: true },
  status: { type: String, enum: ['Not Started', 'In Progress', 'Completed'], default: 'Not Started' },
  deadline: { type: Date, required: true }
});

const employeeSchema = new mongoose.Schema({
  fullName: {
    firstName: { type: String, required: true },
    lastName: { type: String, required: true }
  },
  email: { type: String, required: true, unique: true, match: /.+\@.+\..+/ },
  password: { type: String, required: true },
  tasks: [taskSchema]
});

const Employee = mongoose.model('Employee', employeeSchema);

module.exports = Employee;
Explanation of the Schema:
fullName: A sub-document with two properties: firstName and lastName.
email: The employee's email, which should be unique and follow a basic email format.
password: The password field, where you'll store the hashed password (use bcrypt or another hashing algorithm in your backend before storing).
tasks: An array of tasks, each with:
id: An identifier for the task. In this case, you can use a unique id for each task or stick with the array index if that's your preference.
title: Title of the task.
description: Detailed description of the task.
status: The current status of the task (with predefined states).
deadline: The date when the task should be completed.
Example Task Array:
javascript
Copy code
const employee = new Employee({
  fullName: {
    firstName: 'John',
    lastName: 'Doe'
  },
  email: 'johndoe@example.com',
  password: 'hashedpassword',
  tasks: [
    {
      id: 0,
      title: 'Complete Report',
      description: 'Complete the monthly performance report.',
      status: 'In Progress',
      deadline: new Date('2024-12-31')
    },
    {
      id: 1,
      title: 'Prepare Presentation',
      description: 'Prepare the project presentation for the meeting.',
      status: 'Not Started',
      deadline: new Date('2025-01-15')
    }
  ]
});





Your folder structure might look like this:

css
Copy code
src/
├── components/
│   ├── Navbar.js
│   ├── Footer.js
│   ├── TaskCard.js
│   └── DashboardSummary.js
├── pages/
│   ├── HomePage.js
│   ├── AdminDashboard.js
│   ├── EmployeeDashboard.js
│   ├── Login.js
│   └── NotFound.js
├── App.js
└── index.css
4. Code for Components
Navbar.js
This component is for the navigation bar that appears on all pages.

jsx
Copy code
import React from "react";
import { Link } from "react-router-dom";

const Navbar = () => {
  return (
    <nav className="bg-blue-600 p-4">
      <div className="container mx-auto flex justify-between items-center">
        <Link to="/" className="text-white text-xl font-bold">
          Task Manager
        </Link>
        <div className="space-x-4">
          <Link to="/login" className="text-white">Login</Link>
          <Link to="/admin-dashboard" className="text-white">Admin Dashboard</Link>
          <Link to="/employee-dashboard" className="text-white">Employee Dashboard</Link>
        </div>
      </div>
    </nav>
  );
};

export default Navbar;
Footer.js
This component is for the footer that will be reused across pages.

jsx
Copy code
import React from "react";

const Footer = () => {
  return (
    <footer className="bg-gray-800 text-white py-4 text-center">
      <p>&copy; 2024 Task Manager. All rights reserved.</p>
    </footer>
  );
};

export default Footer;
HomePage.js
This page includes a welcome message, logo, and login options.

jsx
Copy code
import React from "react";
import Navbar from "../components/Navbar";
import Footer from "../components/Footer";

const HomePage = () => {
  return (
    <div className="flex flex-col min-h-screen">
      <Navbar />
      <main className="flex-grow flex flex-col justify-center items-center bg-gray-50 p-6">
        <div className="text-center">
          <h1 className="text-4xl font-bold mb-4">Welcome to Task Manager</h1>
          <p className="text-lg mb-6">Manage your tasks and employees efficiently.</p>
          <div className="space-x-4">
            <Link to="/login" className="bg-blue-600 text-white px-6 py-2 rounded-lg">Login</Link>
            <Link to="/admin-dashboard" className="bg-green-600 text-white px-6 py-2 rounded-lg">Admin Dashboard</Link>
          </div>
        </div>
      </main>
      <Footer />
    </div>
  );
};

export default HomePage;
AdminDashboard.js
This page is for the admin to view the overall statistics and manage employees and tasks.

jsx
Copy code
import React, { useEffect, useState } from "react";
import Navbar from "../components/Navbar";
import Footer from "../components/Footer";
import DashboardSummary from "../components/DashboardSummary";

const AdminDashboard = () => {
  const [dashboardData, setDashboardData] = useState(null);

  useEffect(() => {
    // Fetch the dashboard data from API (this would be your backend API call)
    // Example data structure (this would come from your backend)
    const fetchDashboardData = async () => {
      // Replace with actual API call
      const response = await fetch("/api/admin-dashboard");
      const data = await response.json();
      setDashboardData(data.adminDashboard);
    };

    fetchDashboardData();
  }, []);

  return (
    <div className="min-h-screen flex flex-col">
      <Navbar />
      <main className="flex-grow bg-gray-50 p-6">
        <h1 className="text-3xl font-bold mb-6">Admin Dashboard</h1>
        {dashboardData && (
          <DashboardSummary data={dashboardData} />
        )}
      </main>
      <Footer />
    </div>
  );
};

export default AdminDashboard;
DashboardSummary.js
A summary card to show employee statistics.

jsx
Copy code
import React from "react";

const DashboardSummary = ({ data }) => {
  return (
    <div className="grid md:grid-cols-3 gap-4">
      <div className="bg-white p-6 shadow-lg rounded-lg">
        <h3 className="text-xl font-semibold">All Employees</h3>
        <p className="text-3xl font-bold">{data.AllEmployees}</p>
      </div>
      {data.summary.map((item, index) => (
        <div key={index} className="bg-white p-6 shadow-lg rounded-lg">
          <h3 className="text-xl font-semibold">{item.employee}</h3>
          <p className="text-md">Active Tasks: {item.activeTask}</p>
          <p className="text-md">Completed Tasks: {item.completedTask}</p>
        </div>
      ))}
    </div>
  );
};

export default DashboardSummary;
Login.js
This page is for both admin and employee login.

jsx
Copy code
import React, { useState } from "react";

const Login = () => {
  const [email, setEmail] = useState("");
  const [password, setPassword] = useState("");
  const [isAdmin, setIsAdmin] = useState(false);

  const handleSubmit = (e) => {
    e.preventDefault();
    // Handle login logic
  };

  return (
    <div className="flex justify-center items-center h-screen bg-gray-100">
      <div className="bg-white p-8 rounded-lg shadow-lg w-full max-w-sm">
        <h2 className="text-2xl font-semibold mb-6">Login</h2>
        <form onSubmit={handleSubmit}>
          <div className="mb-4">
            <label className="block text-gray-700">Email</label>
            <input
              type="email"
              className="w-full p-2 border border-gray-300 rounded"
              value={email}
              onChange={(e) => setEmail(e.target.value)}
              required
            />
          </div>
          <div className="mb-6">
            <label className="block text-gray-700">Password</label>
            <input
              type="password"
              className="w-full p-2 border border-gray-300 rounded"
              value={password}
              onChange={(e) => setPassword(e.target.value)}
              required
            />
          </div>
          <button type="submit" className="w-full bg-blue-600 text-white py-2 rounded-lg">Login</button>
        </form>
      </div>
    </div>
  );
};

export default Login;
5. Finalizing the Project
In App.js, set up routing with React Router.

App.js
jsx
Copy code
import React from "react";
import { BrowserRouter as Router, Route, Routes } from "react-router-dom";
import HomePage from "./pages/HomePage";
import AdminDashboard from "./pages/AdminDashboard";
import EmployeeDashboard from "./pages/EmployeeDashboard";
import Login from "./pages/Login";
import NotFound from "./pages/NotFound";

function App() {
  return (
    <Router>
      <Routes>
        <Route path="/" element={<HomePage />} />
        <Route path="/admin-dashboard" element={<AdminDashboard />} />
        <Route path="/employee-dashboard" element={<EmployeeDashboard />} />
        <Route path="/login" element={<Login />} />
        <Route path="*" element={<NotFound />} />
      </Routes>
    </Router>
  );
}

export default App;
6. Make the Layout Responsive with Tailwind CSS
By using Tailwind's responsive utilities, your layout will be mobile-first. Components like grids, flex, and utilities like md: (for medium screens) will make the app responsive.

For example:

jsx
Copy code
<div className="grid md:grid-cols-2 gap-4">
  <div className="bg-gray-200 p-4">Item 1</div>
  <div className="bg-gray-200 p-4">Item 2</div>
</div>
This ensures that the layout is optimized for both small and large screens.

Conclusion
This is a starting point for creating a frontend for your employee-task-management app. You can expand it with more pages, actions, and refine the UI as per your requirements. Tailwind CSS makes it easy to ensure your app looks good on all devices, and React Router helps to manage different routes seamlessly.



import React from 'react';
import {
  BarChart,
  Bar,
  XAxis,
  YAxis,
  CartesianGrid,
  Tooltip,
  Legend,
  ResponsiveContainer,
  LabelList
} from 'recharts';

const PerformanceChart = ({ performanceData }) => {
  return (
    <div className="bg-white p-4 rounded-xl shadow-md">
      <h2 className="text-xl font-medium text-neutral-800 mb-4">Employee Task Performance</h2>
      <ResponsiveContainer width="100%" height={400}>
        <BarChart
          data={performanceData}
          margin={{
            top: 20,
            right: 30,
            left: 20,
            bottom: 5,
          }}
        >
          <CartesianGrid strokeDasharray="3 3" />
          <XAxis dataKey="name" />
          <YAxis />
          <Tooltip />
          <Legend />
          
          {/* Active Tasks */}
          <Bar
            dataKey="activeTask"
            stackId="a"
            fill="#FF6384"
            name="Active Tasks"
          >
            <LabelList dataKey="activeTask" position="top" />
          </Bar>
          
          {/* Completed Tasks */}
          <Bar
            dataKey="completedTask"
            stackId="a"
            fill="#4BC0C0"
            name="Completed Tasks"
          >
            <LabelList dataKey="completedTask" position="top" />
          </Bar>
          
          {/* Failed Tasks */}
          <Bar
            dataKey="failedTask"
            stackId="a"
            fill="#FF9F40"
            name="Failed Tasks"
          >
            <LabelList dataKey="failedTask" position="top" />
          </Bar>
        </BarChart>
      </ResponsiveContainer>
    </div>
  );
};

export default PerformanceChart;

const performanceData = [
    { name: 'John Doe', activeTask: 5, completedTask: 10, failedTask: 2 },
    { name: 'Jane Smith', activeTask: 8, completedTask: 12, failedTask: 1 },
    { name: 'Alice Johnson', activeTask: 6, completedTask: 8, failedTask: 3 },
    { name: 'Bob Brown', activeTask: 10, completedTask: 14, failedTask: 4 }
  ]


  module.exports.loginAdmin = async(req,res)=>{
    try {
         
        const errors = validationResult(req)
        if(!errors.isEmpty()){
            return res.status(400).json({errors:errors.array()})
        }

        const {email,password} = req.body
         if(email=== process.env.ADMIN_EMAIL && password=== process.env.ADMIN_PASSWORD){
            const token = jwt.sign(email+password,process.env.JWT_SECRET)
              res.cookie('token',token)
            return res.status(200).json({success:true, token})
         }
         else{
            return res.status(400).json({success:false,message:'Invalid Credentails!'})
         }
    } catch (error) {
        console.log(error)
        return res.status(500).json({success:false,message:error.message})
    }
}
