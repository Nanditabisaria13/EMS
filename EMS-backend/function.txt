2. Creating Controllers
We will now define controllers to handle operations related to employees, admins, and tasks.

Employee Controller (controllers/employeeController.js)
js
Copy code


const Employee = require('../models/Employee');

// Get all employees
exports.getEmployees = async (req, res) => {
  try {
    const employees = await Employee.find();
    res.status(200).json(employees);
  } catch (error) {
    res.status(500).json({ message: error.message });
  }
};

// Get a specific employee by ID
exports.getEmployee = async (req, res) => {
  try {
    const employee = await Employee.findById(req.params.id);
    if (!employee) {
      return res.status(404).json({ message: 'Employee not found' });
    }
    res.status(200).json(employee);
  } catch (error) {
    res.status(500).json({ message: error.message });
  }
};

// Add a new employee
exports.createEmployee = async (req, res) => {
  const { firstname, email, password } = req.body;

  const newEmployee = new Employee({
    firstname,
    email,
    password,
    tasks: [],
    taskNumbers: { active: 0, newTask: 0, completed: 0, failed: 0 }
  });

  try {
    const employee = await newEmployee.save();
    res.status(201).json(employee);
  } catch (error) {
    res.status(500).json({ message: error.message });
  }
};

// Update employee task status
exports.updateEmployeeTask = async (req, res) => {
  const { taskId, status } = req.body;

  try {
    const employee = await Employee.findById(req.params.id);
    if (!employee) {
      return res.status(404).json({ message: 'Employee not found' });
    }

    const task = employee.tasks.id(taskId);
    if (!task) {
      return res.status(404).json({ message: 'Task not found' });
    }

    task[status] = true; // Update the task status (active, completed, failed, etc.)
    await employee.save();
    res.status(200).json(employee);
  } catch (error) {
    res.status(500).json({ message: error.message });
  }
};


Task Controller (controllers/taskController.js)
const Employee = require('../models/Employee');

// Add a task to an employee
exports.addTask = async (req, res) => {
  const { employeeId, title, description, date, category } = req.body;

  try {
    const employee = await Employee.findById(employeeId);
    if (!employee) {
      return res.status(404).json({ message: 'Employee not found' });
    }

    const newTask = {
      title,
      description,
      date,
      category,
      active: true,
      newTask: true,
      completed: false,
      failed: false
    };

    employee.tasks.push(newTask);
    employee.taskNumbers.newTask += 1;
    await employee.save();

    res.status(201).json(employee);
  } catch (error) {
    res.status(500).json({ message: error.message });
  }
};

3. Setting up the Routes
Employee Routes (routes/employeeRoutes.js)
const express = require('express');
const { getEmployees, getEmployee, createEmployee, updateEmployeeTask } = require('../controllers/employeeController');
const router = express.Router();

router.get('/', getEmployees);
router.get('/:id', getEmployee);
router.post('/', createEmployee);
router.put('/:id/task', updateEmployeeTask);

module.exports = router;


Task Routes (routes/taskRoutes.js)
js
Copy code

const express = require('express');
const { addTask } = require('../controllers/taskController');
const router = express.Router();

router.post('/add', addTask);

module.exports = router;


There are several other useful functions you can add to your Employee Management System to make it more comprehensive. These functions can help with better management, search capabilities, task tracking, and security. Below are a few suggestions:

1. Update Employee Information
You can allow employees to update their profile information (like email, password, or personal details). Similarly, admins can update employee details.

Function for Employee to Update Profile:
Controller (employeeController.js)
// Update employee details
exports.updateEmployeeProfile = async (req, res) => {
  const { firstname, email, password } = req.body;

  try {
    const employee = await Employee.findById(req.params.id);
    if (!employee) {
      return res.status(404).json({ message: 'Employee not found' });
    }

    // Update the fields
    employee.firstname = firstname || employee.firstname;
    employee.email = email || employee.email;
    employee.password = password || employee.password;

    await employee.save();
    res.status(200).json(employee);
  } catch (error) {
    res.status(500).json({ message: error.message });
  }
};



There are several other useful functions you can add to your Employee Management System to make it more comprehensive. These functions can help with better management, search capabilities, task tracking, and security. Below are a few suggestions:

1. Update Employee Information
You can allow employees to update their profile information (like email, password, or personal details). Similarly, admins can update employee details.

Function for Employee to Update Profile:
Controller (employeeController.js)

js
Copy code
// Update employee details
exports.updateEmployeeProfile = async (req, res) => {
  const { firstname, email, password } = req.body;

  try {
    const employee = await Employee.findById(req.params.id);
    if (!employee) {
      return res.status(404).json({ message: 'Employee not found' });
    }

    // Update the fields
    employee.firstname = firstname || employee.firstname;
    employee.email = email || employee.email;
    employee.password = password || employee.password;

    await employee.save();
    res.status(200).json(employee);
  } catch (error) {
    res.status(500).json({ message: error.message });
  }
};
Route (employeeRoutes.js)

js
Copy code
router.put('/:id/profile', updateEmployeeProfile);
This allows employees to update their profiles, e.g., email or password. You can expand this to allow them to update additional information as needed.

2. Assign/Unassign Tasks to Employees
This functionality allows admins to assign tasks to employees, and even unassign tasks. This is useful for task management and tracking.

Function for Admin to Assign a Task:
Controller (taskController.js)

js
Copy code
// Admin assigns a task to an employee
exports.assignTask = async (req, res) => {
  const { employeeId, title, description, date, category } = req.body;

  try {
    const employee = await Employee.findById(employeeId);
    if (!employee) {
      return res.status(404).json({ message: 'Employee not found' });
    }

    const newTask = {
      title,
      description,
      date,
      category,
      active: true,
      newTask: true,
      completed: false,
      failed: false
    };

    employee.tasks.push(newTask);
    employee.taskNumbers.newTask += 1;

    // Update taskNumbers
    await employee.save();

    res.status(201).json(employee);
  } catch (error) {
    res.status(500).json({ message: error.message });
  }
};
Route (taskRoutes.js)

js
Copy code
router.post('/assign', assignTask);
Function for Admin to Unassign a Task:
Controller (taskController.js)

js
Copy code
// Admin unassigns a task from an employee
exports.unassignTask = async (req, res) => {
  const { taskId, employeeId } = req.body;

  try {
    const employee = await Employee.findById(employeeId);
    if (!employee) {
      return res.status(404).json({ message: 'Employee not found' });
    }

    const taskIndex = employee.tasks.findIndex(task => task._id.toString() === taskId);
    if (taskIndex === -1) {
      return res.status(404).json({ message: 'Task not found' });
    }

    // Remove task from the employee's tasks list
    employee.tasks.splice(taskIndex, 1);
    employee.taskNumbers.newTask -= 1;

    await employee.save();
    res.status(200).json(employee);
  } catch (error) {
    res.status(500).json({ message: error.message });
  }
};
Route (taskRoutes.js)

js
Copy code
router.post('/unassign', unassignTask);

3. Mark Tasks as Completed/Failed
Allow employees or admins to mark tasks as completed or failed. This is important for tracking the progress of tasks.

Function for Employee to Mark Task as Completed:
Controller (employeeController.js)

js
Copy code
// Employee marks a task as completed
exports.markTaskCompleted = async (req, res) => {
  const { taskId } = req.body;

  try {
    const employee = await Employee.findById(req.params.id);
    if (!employee) {
      return res.status(404).json({ message: 'Employee not found' });
    }

    const task = employee.tasks.id(taskId);
    if (!task) {
      return res.status(404).json({ message: 'Task not found' });
    }

    task.completed = true;
    task.active = false;  // Task is no longer active after completing

    employee.taskNumbers.completed += 1;
    employee.taskNumbers.active -= 1;

    await employee.save();
    res.status(200).json(employee);
  } catch (error) {
    res.status(500).json({ message: error.message });
  }
};
Route (employeeRoutes.js)

js
Copy code
router.put('/:id/task/completed', markTaskCompleted);

4. Employee Task Search and Filtering
Implement functionality for employees and admins to search or filter tasks based on certain criteria like status (completed, failed), category, or date.

Function to Filter Tasks by Category or Status:
Controller (taskController.js)

js
Copy code
// Filter tasks by category or status
exports.filterTasks = async (req, res) => {
  const { category, status } = req.query; // status: 'active', 'completed', 'failed'

  try {
    const filter = {};
    if (category) filter.category = category;
    if (status) filter[status] = true;

    const employees = await Employee.find({ 'tasks': { $elemMatch: filter } });
    res.status(200).json(employees);
  } catch (error) {
    res.status(500).json({ message: error.message });
  }
};
Route (taskRoutes.js)

js
Copy code
router.get('/filter', filterTasks);

5. Change Employee Password
This is an important feature to allow employees to update their password.

Function for Employee to Change Password:
Controller (employeeController.js)

js
Copy code
// Employee changes password
exports.changePassword = async (req, res) => {
  const { currentPassword, newPassword } = req.body;

  try {
    const employee = await Employee.findById(req.params.id);
    if (!employee) {
      return res.status(404).json({ message: 'Employee not found' });
    }

    // Check if the current password is correct
    if (employee.password !== currentPassword) {
      return res.status(400).json({ message: 'Incorrect current password' });
    }

    // Update the password
    employee.password = newPassword;
    await employee.save();
    res.status(200).json({ message: 'Password updated successfully' });
  } catch (error) {
    res.status(500).json({ message: error.message });
  }
};
Route (employeeRoutes.js)

js
Copy code
router.put('/:id/password', changePassword);

6. Admin Dashboard: View Employee Task Summary
Admins may want to see an overview or summary of tasks assigned to all employees. You can create an endpoint that aggregates this data.

Function for Admin to Get Task Summary:
Controller (adminController.js)

js
Copy code
// Admin views task summary
exports.getTaskSummary = async (req, res) => {
  try {
    const employees = await Employee.find();
    const summary = employees.map(employee => ({
      employee: employee.firstname,
      tasks: employee.tasks.length,
      activeTasks: employee.taskNumbers.active,
      completedTasks: employee.taskNumbers.completed,
      failedTasks: employee.taskNumbers.failed
    }));

    res.status(200).json(summary);
  } catch (error) {
    res.status(500).json({ message: error.message });
  }
};

Route (adminRoutes.js)
js
Copy code
router.get('/dashboard', getTaskSummary);

7. Employee Task History
Allow employees to see the history of their tasks, such as completed, failed, or pending tasks.

Function for Employee to View Task History:
Controller (employeeController.js)

js
Copy code
// View all tasks of an employee
exports.getEmployeeTaskHistory = async (req, res) => {
  try {
    const employee = await Employee.findById(req.params.id);
    if (!employee) {
      return res.status(404).json({ message: 'Employee not found' });
    }

    res.status(200).json(employee.tasks);
  } catch (error) {
    res.status(500).json({ message: error.message });
  }
};
Route (employeeRoutes.js)

js
Copy code
router.get('/:id/tasks', getEmployeeTaskHistory);
Summary of Functions Added:
Update Employee Profile: Allows employees to update their profile information.
Assign/Unassign Tasks: Admin can assign or unassign tasks to employees.
Mark Tasks as Completed/Failed: Employees can mark tasks as completed or failed.
Filter Tasks by Category/Status: Filter tasks based on category or status (active/completed/failed).
Change Employee Password: Allows employees to change their password.
Admin Dashboard: Provides task summary and task statistics for admins.
Employee Task History: Allows employees to view all tasks and their statuses.
Each of these functions adds more capabilities to the system and makes it more useful for both employees and admins to manage tasks and profiles efficiently.

In addition to the basic functionality of creating, assigning, and viewing tasks, you can expand your Employee Management System project by adding several more features. Below are some suggestions for additional functionality that can enhance the project, along with the code implementation for each:

1. Update Task Status (Mark task as completed or failed)
It’s useful for tracking the progress of a task. Employees or managers should be able to update the status of a task to either "completed" or "failed" based on the outcome.

Route to Update Task Status (taskRoutes.js)
js
Copy code
// Update Task Status (Mark as completed or failed)
router.put('/update-status', async (req, res) => {
  try {
    const { taskId, status } = req.body;

    // Validate status
    if (!['completed', 'failed'].includes(status)) {
      return res.status(400).json({ message: 'Invalid status. Choose "completed" or "failed".' });
    }

    const task = await Task.findById(taskId);
    if (!task) {
      return res.status(404).json({ message: 'Task not found' });
    }

    task.status = status;
    await task.save();

    res.status(200).json({ message: 'Task status updated successfully', task });
  } catch (error) {
    res.status(500).json({ message: 'Error updating task status', error: error.message });
  }
});
Example API Request to Update Task Status
Endpoint: PUT /api/tasks/update-status
Request Body:
json
Copy code
{
  "taskId": "task_id_here",
  "status": "completed"
}
2. Delete a Task
Sometimes tasks need to be deleted (for example, if they were mistakenly created). You can implement a function that allows the deletion of tasks.

Route to Delete Task (taskRoutes.js)
js
Copy code
// Delete Task
router.delete('/delete/:taskId', async (req, res) => {
  try {
    const { taskId } = req.params;

    const task = await Task.findById(taskId);
    if (!task) {
      return res.status(404).json({ message: 'Task not found' });
    }

    await task.remove();
    res.status(200).json({ message: 'Task deleted successfully' });
  } catch (error) {
    res.status(500).json({ message: 'Error deleting task', error: error.message });
  }
});
Example API Request to Delete a Task
Endpoint: DELETE /api/tasks/delete/:taskId
URL Example: DELETE /api/tasks/delete/609b8b7bcf1b2a3a88f37430

3. Get All Employees with Their Task Overview
You might want a route where a manager or admin can view all employees and their task statuses (a summary of tasks for each employee).

Route to Get All Employees with Task Overview (employeeRoutes.js)
js
Copy code
const Employee = require('../models/employeeModel');
const Task = require('../models/taskModel');

// Get all employees with their task counts (pending, completed, failed)
router.get('/overview', async (req, res) => {
  try {
    const employees = await Employee.find();

    // For each employee, get their task count overview
    const employeeTasksOverview = await Promise.all(employees.map(async (employee) => {
      const tasks = await Task.find({ assignedTo: employee._id });
      
      const pendingTasks = tasks.filter(task => task.status === 'pending').length;
      const completedTasks = tasks.filter(task => task.status === 'completed').length;
      const failedTasks = tasks.filter(task => task.status === 'failed').length;

      return {
        employeeName: employee.name,
        position: employee.position,
        tasks: {
          pending: pendingTasks,
          completed: completedTasks,
          failed: failedTasks
        }
      };
    }));

    res.status(200).json(employeeTasksOverview);
  } catch (error) {
    res.status(500).json({ message: 'Error fetching employee task overview', error: error.message });
  }
});
Example API Request for Employee Task Overview
Endpoint: GET /api/employees/overview

4. Search Tasks by Title or Description
Managers or employees might want to search for tasks based on keywords. You can add a search functionality.

Route to Search Tasks (taskRoutes.js)
js
Copy code
// Search tasks by title or description
router.get('/search', async (req, res) => {
  try {
    const { query } = req.query; // Search term

    if (!query) {
      return res.status(400).json({ message: 'Query parameter is required' });
    }

    const tasks = await Task.find({
      $or: [
        { title: { $regex: query, $options: 'i' } },
        { description: { $regex: query, $options: 'i' } }
      ]
    });

    res.status(200).json(tasks);
  } catch (error) {
    res.status(500).json({ message: 'Error searching tasks', error: error.message });
  }
});
Example API Request for Searching Tasks
Endpoint: GET /api/tasks/search?query=feature
This will search for tasks that have the word "feature" in the title or description.

5. Add Due Date Reminders/Notifications
A very useful feature would be to send reminders to employees before a task’s due date.

Using Node Cron for Scheduled Tasks (Install Cron Package)
bash
Copy code
npm install node-cron
Add Cron Job to Send Due Date Reminders (server.js)
js
Copy code
const cron = require('node-cron');
const nodemailer = require('nodemailer');

// Set up your email transport (using Gmail in this case)
const transporter = nodemailer.createTransport({
  service: 'gmail',
  auth: {
    user: 'your_email@gmail.com',
    pass: 'your_email_password',
  },
});

// Send email reminder to employees for due tasks
cron.schedule('0 9 * * *', async () => {
  const tasks = await Task.find({ status: 'pending' });

  tasks.forEach(async (task) => {
    const dueDate = new Date(task.dueDate);
    const currentDate = new Date();

    // If the task is due in the next day
    if (dueDate - currentDate <= 86400000 && dueDate - currentDate > 0) {
      const employee = await Employee.findById(task.assignedTo);
      const mailOptions = {
        from: 'your_email@gmail.com',
        to: employee.email,
        subject: `Reminder: Task "${task.title}" Due Tomorrow`,
        text: `Hello ${employee.name},\n\nThis is a reminder that your task "${task.title}" is due tomorrow. Please make sure to complete it on time.\n\nBest regards, Employee Management System.`,
      };

      // Send email
      transporter.sendMail(mailOptions, (error, info) => {
        if (error) {
          console.log(error);
        } else {
          console.log(`Reminder sent: ${info.response}`);
        }
      });
    }
  });
});
This cron job will send reminders to employees 24 hours before the task's due date.

6. Add Task Priority Levels (High, Medium, Low)
You can enhance the tasks by adding priority levels to better manage important tasks.

Update Task Model to Include Priority (taskModel.js)
js
Copy code
const taskSchema = new mongoose.Schema({
  title: {
    type: String,
    required: true,
  },
  description: {
    type: String,
    required: true,
  },
  assignedTo: {
    type: mongoose.Schema.Types.ObjectId,
    ref: 'Employee',
    required: true,
  },
  status: {
    type: String,
    enum: ['pending', 'completed', 'failed'],
    default: 'pending',
  },
  dueDate: {
    type: Date,
    required: true,
  },
  priority: {
    type: String,
    enum: ['low', 'medium', 'high'],
    default: 'medium',
  }
  
});
You can now add the priority field when creating or updating tasks.

Example API Request to Create Task with Priority
json
Copy code
{
  "title": "Design Feature X",
  "description": "Design the user interface for feature X.",
  "assignedTo": "employee_id_here",
  "dueDate": "2024-12-30T23:59:59",
  "priority": "high"
}
Summary of Additional Features:
Update Task Status (Completed, Failed)
Delete a Task
Employee Overview (List all employees and their task statuses)
Search Tasks (By title/description)
Due Date Reminders (Using cron jobs to send email reminders before tasks are due)
Task Priority Levels (Low, Medium, High)
These additional features can significantly improve your Employee Management System, making it more flexible and useful for handling employee tasks.


2. Admin Dashboard Features
You can create endpoints for the admin to:

View statistics such as the total number of employees, tasks, etc.
Assign tasks to employees.
View and manage employee performance and task completion rates.
Example: View Statistics for Admin
In adminController.js:

javascript
Copy code
// Get Stats for Admin (Employee and Task Counts)
const getDashboardStats = async (req, res) => {
  try {
    const totalEmployees = await Employee.countDocuments();
    const totalTasks = await Employee.aggregate([
      { $unwind: "$tasks" },
      { $group: { _id: null, total: { $sum: 1 } } }
    ]);
    const activeTasks = await Employee.aggregate([
      { $unwind: "$tasks" },
      { $match: { "tasks.active": true } },
      { $group: { _id: null, total: { $sum: 1 } } }
    ]);

    res.json({
      totalEmployees,
      totalTasks: totalTasks[0]?.total || 0,
      activeTasks: activeTasks[0]?.total || 0,
    });
  } catch (err) {
    res.status(500).json({ message: err.message });
  }
};
In adminRoutes.js:

javascript
Copy code
router.get('/dashboard', getDashboardStats); // Get statistics for admin
3. Task Management for Admin
Allow admins to:

Assign, update, or remove tasks from employees.
Mark tasks as completed or failed.
Example: Assign Task to Employee
In adminController.js:

javascript
Copy code
// Assign Task to Employee
const assignTaskToEmployee = async (req, res) => {
  const { employeeId, task } = req.body;

  try {
    const employee = await Employee.findById(employeeId);
    if (!employee) {
      return res.status(404).json({ message: 'Employee not found' });
    }

    // Add task to the employee's task list
    employee.tasks.push(task);

    // Update taskNumbers based on task status
    if (task.active) employee.taskNumbers.active += 1;
    if (task.newTask) employee.taskNumbers.newTask += 1;

    await employee.save();
    res.json(employee);
  } catch (err) {
    res.status(500).json({ message: err.message });
  }
};
In adminRoutes.js:

javascript
Copy code
router.post('/assign-task', assignTaskToEmployee);  // Admin assigns a task to an employee
4. Search and Filter Employees
Allow the admin to filter or search for employees by name, email, task status, etc.

Example: Filter Employees by Task Status
In employeeController.js:

javascript
Copy code
// Filter employees by task status (active/completed/failed)
const filterEmployeesByTaskStatus = async (req, res) => {
  const { status } = req.query;  // Accept 'active', 'completed', or 'failed' as status filter

  try {
    const employees = await Employee.find({
      'tasks.status': status,
    });

    res.json(employees);
  } catch (err) {
    res.status(500).json({ message: err.message });
  }
};
In employeeRoutes.js:

javascript
Copy code
router.get('/filter', filterEmployeesByTaskStatus);  // Filter employees by task status



  <div className='w-full flex'>
       <Sidebar/>
        <div className='w-full ml-32 md:ml-72'>
         <AdminNavbar setFilterVisible={setFilterVisible}/>
         <div className='p-4 relative flex flex-col gap-8'>
            <h1 className='font-medium text-2xl text-neutral-800'>All Employees</h1>
           
           <div className='w-full flex items-start justify-between p-2'>
           <div className='flex items-center gap-2 bg-emerald-700 text-white px-4 py-3 rounded-lg '>
              <h1 className='hidden sm:block text-lg font-normal'>Filter:</h1>
            <i  onClick={toggleFilter} className="ri-equalizer-line text-xl font-semibold"></i>
            </div>
          <div className='bg-emerald-700 text-white border-2 border-emerald-900 px-4 py-3 flex items-center gap-2
            rounded-lg '>
          <i className="ri-add-line text-xl font-medium"></i>
              <button className='text-lg font-normal'
              onClick={()=>navigate('/add-employee')}
              >Add New Employee</button>
          </div>
           </div>

           
        {filterVisible && (
        <div className="absolute top-36 left-20 bg-white shadow-md border rounded-lg w-48 p-2 z-10">
          <h1 className='text-lg font-normal p-2 cursor-pointer'>Filter by:</h1>
          <div className="p-2 cursor-pointer hover:bg-gray-200" onClick={() => handleFilterSelect('active')}> Active Tasks</div>
          <div className="p-2 cursor-pointer hover:bg-gray-200" onClick={() => handleFilterSelect('completed')}> Completed Tasks </div>
          <div className="p-2 cursor-pointer hover:bg-gray-200" onClick={() => handleFilterSelect('failed')}>Failed Tasks </div>
        </div>
      )}

         <div className=' grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-4 w-full pt-3   md:px-1 '>

          {
            (filteredEmployees.length > 0 ? filteredEmployees : allEmployees).map((employee,index)=>(
              <div key={index} className='flex items-start justify-between p-4 gap-2 bg-white drop-shadow-md rounded-xl border border-zinc-400
              transition-all hover:scale-105 duration-500 '>
              <img src={employee.image}
               className='w-20 h-20  rounded-full' alt="" />
              <div className='flex flex-col'>
             <h1 className='text-3xl md:text-lg lg:text-xl text-emerald-700 font-medium'>{employee.fullName.firstName} {employee.fullName.lastName}</h1>
                <p className='text-lg md:text-sm lg:text-base font-normal text-gray-600'>{employee.position}</p>
              </div>
            <button onClick={()=>handleOnClick(employee._id)}> <i className="ri-user-fill text-2xl md:text-xl text-zinc-800 font-semibold "></i></button>
            </div> 
            ))
          }
          
         </div>
         </div>
        </div>
    </div>



     const {employeeId, taskId} = req.body 
       const employee = await employeeModel.findById(employeeId)
       if(!employee){
        return res.status(400).json({success:false, message:"Employee not found"})
       }
      
    //    find task by taskId
       const taskIndex = employee.tasks.findIndex(task=>task.taskId === parseInt(taskId))
       if(taskIndex=== -1){
        return res.status(400).json({success:false,messge:"Task not found!"})
       }

    
      employee.taskNumbers.completed +=1
      employee.taskNumbers.active -=1

   
    const updatedEmployee = await employeeModel.findByIdAndUpdate(
      employeeId,
      {
        tasks: employee.tasks,
        'taskNumbers.active': employee.taskNumbers.active,
         'taskNumbers.completed': employee.taskNumbers.completed,
      },
      { new: true }  // Return the updated document
    );


      await  employee.save()
     return res.status(200).json({success:true, message:"Task Completed successfully",updatedEmployee})
   
    
     <div className='p-5 bg-white drop-shadow-md dark:bg-[#1a1a1a] border relative  dark:border-[#535353] rounded max-w-full'>
       <h1 className='font-medium text-2xl text-neutral-800 dark:text-white'>Create a New Task</h1>
            <form
             onSubmit={submitHandler}
            className='flex flex-col gap-8 mt-3 md:grid grid-cols-2 md:gap-6'>
                <div className='w-full '>
                <div className='flex flex-col gap-2 w-full '>
                <h3 className='text-base text-gray-900 mb-0.5 dark:text-white' >Task Title</h3>
                <input className='text-sm py-1 px-2 w-full rounded outline-none bg-transparent border-[1px] border-gray-400 mb-4'
                 type="text" placeholder='Make a UI design' 
                 value={title} 
                 onChange={(e)=>setTitle(e.target.value)}/>
                </div>

                <div className='flex flex-col gap-2 w-full'>
                  <h3 className='text-base text-gray-900 mb-0.5 dark:text-white'>Date</h3>
                  <input  className='text-sm py-1 px-2 w-full rounded outline-none bg-transparent border-[1px] border-gray-400 mb-4'
                   type="date"
                   value={date} 
                   onChange={(e)=>setDate(e.target.value)} />
                  </div>

                  <div className='flex flex-col gap-2 w-full'>
                   <h3 className='text-base text-gray-900 mb-0.5 dark:text-white'>Assign To</h3>
                   <input className='text-sm py-1 px-2  w-full rounded outline-none bg-transparent border-[1px] border-gray-400 mb-4'
                   value={employeeName} 
                   onChange={(e)=>setEmployeeName(e.target.value)} 
                    type="text" placeholder='Employee Name'/>

                   <input className='text-sm py-1 px-2 w-full rounded outline-none bg-transparent border-[1px] border-gray-400 mb-4'
                   value={employeeEmail} 
                   onChange={(e)=>setEmployeeEmail(e.target.value)} 
                    type="text" placeholder='Employee Email'/>
                    
                   </div>
                   

                   <div className='flex flex-col gap-2 w-full'>
                   <h3 className='text-base text-gray-900 mb-0.5 dark:text-white'>Catagory</h3>
                   <input 
                   value={category} 
                   onChange={(e)=>setCategory(e.target.value)}
                   className='text-base py-1 px-2 w-full rounded outline-none bg-transparent border-[1px] border-gray-400 mb-4'
                    type="text" placeholder='design,dev,etc' />
                   </div>
                </div>
                
                <div className='glex flex-col gap-4'>
                <div className=' flex flex-col gap-2'>
                <h3 className='text-base text-gray-900 mb-0.5 dark:text-white'>Description</h3> 
                <textarea className='w-full h-44 text-sm py-2 px-4 bg-transparent rounded outline-none border-[1px] border-gray-600' name="" id=""
                 value={description}
                onChange={(e)=>setDescription(e.target.value) }
                ></textarea>
                
                 <button type='submit' className='bg-emerald-500 py-3 hover:bg-emerald-600 px-5 rounded text-lg mt-4 w-full'>Create Task</button>
                </div>
                </div>
             
            </form>

        </div>